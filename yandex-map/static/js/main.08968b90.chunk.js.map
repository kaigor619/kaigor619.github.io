{"version":3,"sources":["actions/index.js","components/myMap/myMap.js","components/myMap/index.js","components/input/input.js","components/input/index.js","components/hoc/withData-html5.js","components/card/ItemTypes.js","components/card/card.js","components/card/index.js","components/list-route/list-route.js","components/list-route/index.js","components/app/index.js","components/app/app.js","reducer/index.js","store/index.js","index.js"],"names":["updateList","list","type","payload","MyMap","props","state","this","setState","prev","e","id","curr_coords","get","geometry","copy_list","slice","forEach","item","coords","mas_coords","markers","map","name","push","key","defaultGeometry","properties","balloonContent","options","draggable","onDrag","onMouseDown","createCoords","placemark_coords","query","ns","load","defaultState","center","zoom","controls","width","height","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","Component","mapDispatchToProps","connect","Input","value","uniqueId","onSubmit","bind","onKeyDown","preventDefault","addItem","target","action","method","className","placeholder","onChange","withDataHTML5","Wrapped","backend","HTML5Backend","Card","React","forwardRef","ref","text","deleteItem","isDragging","connectDragSource","connectDropTarget","elementRef","useRef","opacity","useImperativeHandle","getNode","current","style","onClick","DropTarget","ItemTypes","hover","monitor","component","node","dragIndex","getItem","index","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveCard","dropTarget","DragSource","beginDrag","dragSource","ListRouteContainer","data","length","ListRoute","removeItem","dragCard","newList","update","$splice","items","i","App","initialState","store","createStore","splice","root","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.08968b90.chunk.js","sourcesContent":["const addItem=(item)=>{\r\n    return{\r\n        type:'ADD_ITEM',\r\n        payload:item\r\n    }\r\n}\r\nconst removeItem=(id)=>{\r\n    return{\r\n        type:'REMOVE_ITEM',\r\n        payload:id\r\n    }\r\n}\r\n\r\nconst updateList=(list)=>{\r\n    return{\r\n        type:'UPDATE_LIST',\r\n        payload:list\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {\r\n    addItem,\r\n    removeItem,\r\n    updateList\r\n}","import React, {Component} from 'react';\r\nimport { YMaps, Map , Placemark, Polyline} from 'react-yandex-maps';\r\nimport {connect} from 'react-redux';\r\nimport {updateList} from '../../actions';\r\n\r\n\r\nclass MyMap extends Component{\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            list:[]\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        let {list}=this.props;\r\n        this.setState({list});\r\n    }\r\n    componentDidUpdate(prev){\r\n        if(prev.list!==this.props.list){\r\n            this.setState({list:this.props.list});\r\n        }\r\n    }\r\n\r\n    onMouseDown(e, id){\r\n        let curr_coords=e.get(\"target\").geometry['_coordinates'];\r\n        this.setState(({list})=>{\r\n            let copy_list=list.slice();\r\n            copy_list.forEach((item)=>{\r\n                if(item.id==id){\r\n                    item.coords=curr_coords;\r\n                }\r\n            });\r\n            return{\r\n                list:copy_list\r\n            }\r\n        });\r\n    }\r\n\r\n    createCoords(){\r\n        let {list}=this.state;\r\n        let mas_coords=[];\r\n        let markers=list.map(({name, id, coords})=>{\r\n            mas_coords.push(coords);\r\n            return(\r\n                <Placemark\r\n                    key={id}\r\n                    defaultGeometry={coords}\r\n                    properties={{\r\n                        balloonContent  :name,\r\n                    }} \r\n                    options={{\r\n                        draggable:true,\r\n                    }}\r\n                    onDrag={(e)=>{this.onMouseDown(e,id)}}\r\n                />\r\n            )\r\n        });\r\n        return {\r\n            'placemark_coords': mas_coords,\r\n            markers,\r\n        };\r\n    }\r\n\r\n    render(){\r\n        let {placemark_coords, markers}=this.createCoords();\r\n        return(\r\n            <YMaps\r\n                query={{\r\n                ns: 'use-load-option',\r\n                load:\r\n                'Map,Placemark,control.ZoomControl,control.FullscreenControl,geoObject.addon.balloon',\r\n                }}> \r\n\r\n                <Map\r\n                    defaultState={{\r\n                    center: [55.75, 37.57],\r\n                    zoom: 9,\r\n                    controls: ['zoomControl', 'fullscreenControl'],\r\n                    }}\r\n                    width='100%'\r\n                    height='400px'>\r\n\r\n                    {markers}\r\n\r\n                    <Polyline \r\n                        geometry={placemark_coords}\r\n                        options={{\r\n                            balloonCloseButton: false,\r\n                            strokeColor: '#000',\r\n                            strokeWidth: 4,\r\n                            strokeOpacity: 0.5\r\n                        }}/>\r\n                </Map>\r\n            </YMaps>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=({list})=>{\r\n    return {\r\n        list\r\n    }\r\n}\r\nconst mapDispatchToProps={\r\n    updateList\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyMap);","import MyMap from './myMap';\r\n\r\nexport default MyMap;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addItem} from '../../actions';\r\n\r\nexport class Input extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            value:''\r\n        }\r\n        this.uniqueId=1;\r\n        this.onSubmit=this.onSubmit.bind(this);\r\n        this.onKeyDown=this.onKeyDown.bind(this);\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        let {value}=this.state;\r\n        this.props.addItem({name:value, id:this.uniqueId});\r\n        this.setState({value:''});\r\n        this.uniqueId++;\r\n    }\r\n    onKeyDown(e){\r\n        this.setState({value:e.target.value});\r\n        \r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.onSubmit} action=\"\" method=\"post\" id=\"formMap\">\r\n                <input type=\"text\" id=\"input-add-item\" className=\"form-control\" placeholder=\"Новая точка маршрута\" onChange={this.onKeyDown} value={this.state.value}/>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps=()=>{\r\n    return{}\r\n}\r\nconst mapDispatchToProps={\r\n    addItem,\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Input);","import Input from'./input';\r\n\r\nexport default Input;","import React from 'react';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport {DndProvider} from 'react-dnd';\r\n\r\nconst withDataHTML5=()=>(Wrapped)=>{\r\n    return (props)=>{\r\n        return(\r\n            <DndProvider backend={HTML5Backend}>\r\n                \r\n                <Wrapped {...props} />\r\n                 \r\n            </DndProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withDataHTML5;","export default {\r\n    CARD: \"card\"\r\n  };\r\n  ","import React, { useImperativeHandle, useRef } from \"react\";\r\nimport { DragSource, DropTarget } from \"react-dnd\";\r\nimport ItemTypes from \"./ItemTypes\";\r\n\r\n\r\n\r\nconst Card = React.forwardRef(\r\n  ({ text, id, deleteItem ,isDragging, connectDragSource, connectDropTarget }, ref) => {\r\n    const elementRef = useRef(null);\r\n    connectDragSource(elementRef);\r\n    connectDropTarget(elementRef);\r\n    const opacity = isDragging ? 0 : 1;\r\n    useImperativeHandle(ref, () => ({\r\n      getNode: () => elementRef.current\r\n    }));\r\n\r\n\r\n\r\n    return ( \r\n\r\n      <li ref={elementRef} className='list-group-item' style={{opacity }} >\r\n          <span>{text}</span>\r\n          <div \r\n            className=\"delete-route-path\"\r\n            onClick={\r\n                ()=>{\r\n                    deleteItem(id);\r\n                }\r\n            }\r\n            >\r\n            <i className=\"fa fa-times\"></i>\r\n          </div>\r\n      </li>\r\n    );\r\n  }\r\n);\r\nexport default DropTarget(\r\n  ItemTypes.CARD,\r\n  {\r\n    hover(props, monitor, component) {\r\n      if (!component) {\r\n        return null;\r\n      }\r\n      // node = HTML Div element from imperative API\r\n      const node = component.getNode();\r\n      if (!node) {\r\n        return null;\r\n      }\r\n      const dragIndex = monitor.getItem().index;\r\n      const hoverIndex = props.index;\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return;\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = node.getBoundingClientRect();\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset();\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Time to actually perform the action\r\n      props.moveCard(dragIndex, hoverIndex);\r\n    //   props.delateItem(dragIndex);\r\n    //   props.clickDelete\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      monitor.getItem().index = hoverIndex;\r\n    }\r\n  },\r\n  connect => ({\r\n    connectDropTarget: connect.dropTarget()\r\n  })\r\n)(\r\n  DragSource(\r\n    ItemTypes.CARD,\r\n    {\r\n      beginDrag: props => ({\r\n        id: props.id,\r\n        index: props.index\r\n      })\r\n    },\r\n    (connect, monitor) => ({\r\n      connectDragSource: connect.dragSource(),\r\n      isDragging: monitor.isDragging(),\r\n    })\r\n  )(Card)\r\n);\r\n","import Card from './card';\r\n\r\nexport default Card;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport update from \"immutability-helper\";\r\nimport withDataHTML5 from '../hoc/withData-html5';\r\nimport {removeItem, updateList} from '../../actions';\r\nimport Card from '../card';\r\n\r\nconst ListRouteContainer=({data})=>{\r\n    if(data.length==0)\r\n        return null;\r\n\r\n    return(\r\n        <ul className=\"list-group list-route\">\r\n            {data}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport class ListRoute extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.deleteItem=this.deleteItem.bind(this);\r\n        this.moveCard=this.moveCard.bind(this);\r\n    }\r\n\r\n    deleteItem(id){\r\n        this.props.removeItem(id);\r\n    }\r\n\r\n    moveCard(dragIndex, hoverIndex){\r\n        let {list}=this.props;\r\n        const dragCard = list[dragIndex];\r\n        let newList=update(list, {\r\n            $splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]]\r\n        });\r\n        this.props.updateList(newList);\r\n    }\r\n\r\n    render(){\r\n        let {list}=this.props;\r\n        let items=list.map(({name, id}, i)=>{\r\n            return(\r\n                <Card\r\n                    key={id}\r\n                    index={i}\r\n                    id={id}\r\n                    text={name}\r\n                    moveCard={this.moveCard}\r\n                    deleteItem={this.deleteItem}\r\n                />\r\n            );\r\n        });\r\n        return(\r\n            \r\n            <ListRouteContainer data={items}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=({list})=>{\r\n    return{\r\n        list\r\n    }\r\n}\r\nconst mapDispatchToProps={\r\n    removeItem,\r\n    updateList\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withDataHTML5()(ListRoute));","import ListRoute from './list-route';\r\n\r\nexport default ListRoute;","import App from './app';\r\n\r\nexport default App;","import React from 'react';\r\nimport MyMap from '../myMap';\r\nimport Input from '../input';\r\nimport ListRoute from '../list-route';\r\nimport './app.css';\r\n\r\nconst App = ()=>{\r\n\r\n    return(\r\n        <div className=\"container\">  \r\n            <div className=\"row\">\r\n                <div className='col-6'>\r\n                    <Input />\r\n                    <ListRoute/>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <MyMap/>\r\n                </div>\r\n            </div>   \r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default App;","const initialState={\r\n    list:[]\r\n}\r\n\r\nconst reducer=(state=initialState, action)=>{\r\n\r\n    switch(action.type){\r\n\r\n        case 'ADD_ITEM':{\r\n            let item=action.payload;\r\n            let list=state.list.slice();\r\n            let {id,name}=item;\r\n\r\n            let options={\r\n                name,\r\n                id,\r\n                coords:[55.75, 37.57]\r\n            }\r\n            list.push(options);\r\n            return {\r\n                ...state,\r\n                list,\r\n            }\r\n        }\r\n        case 'REMOVE_ITEM':{\r\n            let id=action.payload;\r\n            let list=state.list.slice();\r\n            list.forEach((item , index)=>{\r\n                if(item.id==id){\r\n                    list.splice(index, 1);\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                list,\r\n            }\r\n        }\r\n        case 'UPDATE_LIST':{\r\n            let list=action.payload;\r\n            return{\r\n                ...state,\r\n                list,\r\n            }\r\n        }\r\n\r\n\r\n\r\n        default : return state;\r\n    }\r\n}\r\n\r\nexport {\r\n    reducer,\r\n    initialState\r\n}","import {createStore} from 'redux';\r\nimport {reducer} from '../reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport{\r\n    store\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport {Provider} from 'react-redux';\nimport {store} from './store';\n\n\nconst root=document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, root);\n\n"],"sourceRoot":""}